{"ast":null,"code":"// sort a list by its key\nexport function sortByKey(list, key) {\n  if (list !== undefined) {\n    list.sort((a, b) => {\n      if (a[key] > b[key]) {\n        return 1;\n      }\n\n      if (a[key] < b[key]) {\n        return -1;\n      }\n\n      return 0;\n    });\n  }\n\n  return list;\n} // add a random key to the end of a string\n\nexport const addRandomKey = str => str.concat('-').concat(Math.floor(Math.random() * 10000 + 1)); // take a term lower case and replace white spaces with dashes\n\nexport const urlify = str => str.toLowerCase().replace(/\\s/g, '-'); // create mark up\n\nexport const createMarkup = content => ({\n  __html: content\n}); // sort by date & key\n\nexport function sortByDateKey(list, key) {\n  if (list !== undefined) {\n    list.sort((a, b) => {\n      if (a[key] < b[key]) {\n        return 1;\n      }\n\n      if (a[key] > b[key]) {\n        return -1;\n      }\n\n      return 0;\n    });\n  }\n\n  return list;\n} // get current directions to office location func\n\nexport function getDirectionsFromLocation(location) {\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n  const offices = [{\n    title: 'lyndhurst',\n    address: '1100 Valley Brook Ave. Lyndhurst, NJ 07071'\n  }, {\n    title: 'red bank',\n    address: '331 Newman Springs Road Red Bank, NJ 07701'\n  }, {\n    title: 'new york',\n    address: '589 8th Avenue, New York, NY, 10018'\n  }, {\n    title: 'washington dc',\n    address: 'Suite 250 1000 Potomac St., N.W. Washington D.C. 20007'\n  }, {\n    title: 'san francisco',\n    address: '315 Montgomery St. San Francisco, CA 94104'\n  }];\n\n  const success = pos => {\n    const crd = pos.coords;\n    const lat = crd.latitude;\n    const long = crd.longitude;\n    const currentOffice = location.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase(); // filter through available offices\n\n    const destination = offices.filter(v => v.title === currentOffice)[0].address;\n    const map = `https://www.google.com/maps/dir/${lat}+${long}/${destination}`;\n    window.open(map, '_blank');\n  };\n\n  const error = err => {\n    console.warn(`ERROR(${err.code}):${err.message}`);\n  };\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n}\n; // find url parameter for query\n\nexport function splitUrl(url, term = null) {\n  const x = url.split('/');\n  let y = x.filter(a => a !== '');\n\n  if (term !== null) {\n    y = y.filter(a => a !== '' && a !== term);\n  }\n\n  return y;\n}\n; // urlify locations\n\nexport const locationUrl = location => location.toLowerCase().replace(/\\s/g, '-').replace(/[.]/gm, ''); // filter by key\n\nexport function filterByKey(list, key) {\n  const results = [];\n\n  for (let i = 0; i < list.length; i += 1) {\n    if (list[i].key) {\n      if (list[i].key === key) {\n        results.push(list[i].selected);\n      }\n    }\n  }\n\n  return results;\n}\n; // make title\n\nexport const makeTitle = string => string.replace(/-|\\s/g, ' ').replace(/\\+/g, ' ').toUpperCase();\nexport const headers = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n};\nexport function formatDate(date) {\n  const dateObj = new Date(date);\n  const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const results = `${month[dateObj.getMonth()]} ${dateObj.getDate()}, ${dateObj.getFullYear()}`;\n  return results;\n}\nexport function formatCorePractices(link) {\n  return {\n    name: link.title,\n    link: link.slug\n  };\n}\nexport function printScreen() {\n  window.print();\n  return false;\n}\nexport function makeQueryTitle(title) {\n  const formatTitle = title.replace(/\\+/g, ' ');\n  return makeTitle(formatTitle);\n}\nexport function sortByOrder(admins) {\n  admins.sort((a, b) => {\n    return a.orderBy - b.orderBy;\n  });\n}\nexport async function fetcher(...args) {\n  const res = await fetch(...args);\n  return res.json();\n}","map":{"version":3,"sources":["C:/Users/ptumulty/sites/scarincihollenbeck.frontend.cc/client/app/utils/helpers.js"],"names":["sortByKey","list","key","undefined","sort","a","b","addRandomKey","str","concat","Math","floor","random","urlify","toLowerCase","replace","createMarkup","content","__html","sortByDateKey","getDirectionsFromLocation","location","options","enableHighAccuracy","timeout","maximumAge","offices","title","address","success","pos","crd","coords","lat","latitude","long","longitude","currentOffice","destination","filter","v","map","window","open","error","err","console","warn","code","message","navigator","geolocation","getCurrentPosition","splitUrl","url","term","x","split","y","locationUrl","filterByKey","results","i","length","push","selected","makeTitle","string","toUpperCase","headers","Accept","formatDate","date","dateObj","Date","month","getMonth","getDate","getFullYear","formatCorePractices","link","name","slug","printScreen","print","makeQueryTitle","formatTitle","sortByOrder","admins","orderBy","fetcher","args","res","fetch","json"],"mappings":"AAAA;AACA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8B;AACnC,MAAID,IAAI,KAAKE,SAAb,EAAwB;AACtBF,IAAAA,IAAI,CAACG,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,UAAID,CAAC,CAACH,GAAD,CAAD,GAASI,CAAC,CAACJ,GAAD,CAAd,EAAqB;AACnB,eAAO,CAAP;AACD;;AACD,UAAIG,CAAC,CAACH,GAAD,CAAD,GAASI,CAAC,CAACJ,GAAD,CAAd,EAAqB;AACnB,eAAO,CAAC,CAAR;AACD;;AACD,aAAO,CAAP;AACD,KARD;AASD;;AAED,SAAOD,IAAP;AACD,C,CAED;;AACA,OAAO,MAAMM,YAAY,GAAIC,GAAD,IAASA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBA,MAAhB,CAAuBC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,KAAjB,GAA0B,CAArC,CAAvB,CAA9B,C,CAEP;;AACA,OAAO,MAAMC,MAAM,GAAGL,GAAG,IAAIA,GAAG,CAACM,WAAJ,GAAkBC,OAAlB,CAA0B,KAA1B,EAAiC,GAAjC,CAAtB,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAGC,OAAO,KAAK;AAAEC,EAAAA,MAAM,EAAED;AAAV,CAAL,CAA5B,C,CAEP;;AACA,OAAO,SAASE,aAAT,CAAuBlB,IAAvB,EAA6BC,GAA7B,EAAkC;AACvC,MAAID,IAAI,KAAKE,SAAb,EAAwB;AACtBF,IAAAA,IAAI,CAACG,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,UAAID,CAAC,CAACH,GAAD,CAAD,GAASI,CAAC,CAACJ,GAAD,CAAd,EAAqB;AACnB,eAAO,CAAP;AACD;;AACD,UAAIG,CAAC,CAACH,GAAD,CAAD,GAASI,CAAC,CAACJ,GAAD,CAAd,EAAqB;AACnB,eAAO,CAAC,CAAR;AACD;;AACD,aAAO,CAAP;AACD,KARD;AASD;;AAED,SAAOD,IAAP;AACD,C,CAED;;AACA,OAAO,SAASmB,yBAAT,CAAmCC,QAAnC,EAA6C;AAClD,QAAMC,OAAO,GAAG;AACdC,IAAAA,kBAAkB,EAAE,IADN;AAEdC,IAAAA,OAAO,EAAE,IAFK;AAGdC,IAAAA,UAAU,EAAE;AAHE,GAAhB;AAMA,QAAMC,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,WADT;AAEEC,IAAAA,OAAO,EAAE;AAFX,GADc,EAKd;AACED,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,OAAO,EAAE;AAFX,GALc,EASd;AACED,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,OAAO,EAAE;AAFX,GATc,EAad;AACED,IAAAA,KAAK,EAAE,eADT;AAEEC,IAAAA,OAAO,EAAE;AAFX,GAbc,EAiBd;AACED,IAAAA,KAAK,EAAE,eADT;AAEEC,IAAAA,OAAO,EAAE;AAFX,GAjBc,CAAhB;;AAuBA,QAAMC,OAAO,GAAIC,GAAD,IAAS;AACvB,UAAMC,GAAG,GAAGD,GAAG,CAACE,MAAhB;AACA,UAAMC,GAAG,GAAGF,GAAG,CAACG,QAAhB;AACA,UAAMC,IAAI,GAAGJ,GAAG,CAACK,SAAjB;AACA,UAAMC,aAAa,GAAGhB,QAAQ,CAACN,OAAT,CAAiB,gBAAjB,EAAmC,EAAnC,EAAuCD,WAAvC,EAAtB,CAJuB,CAMvB;;AACA,UAAMwB,WAAW,GAAGZ,OAAO,CAACa,MAAR,CAAeC,CAAC,IAAIA,CAAC,CAACb,KAAF,KAAYU,aAAhC,EAA+C,CAA/C,EAAkDT,OAAtE;AACA,UAAMa,GAAG,GAAI,mCAAkCR,GAAI,IAAGE,IAAK,IAAGG,WAAY,EAA1E;AACAI,IAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiB,QAAjB;AACD,GAVD;;AAYA,QAAMG,KAAK,GAAIC,GAAD,IAAS;AACrBC,IAAAA,OAAO,CAACC,IAAR,CAAc,SAAQF,GAAG,CAACG,IAAK,KAAIH,GAAG,CAACI,OAAQ,EAA/C;AACD,GAFD;;AAIAC,EAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCvB,OAAzC,EAAkDe,KAAlD,EAAyDtB,OAAzD;AACD;AAAA,C,CAED;;AACA,OAAO,SAAS+B,QAAT,CAAkBC,GAAlB,EAAuBC,IAAI,GAAG,IAA9B,EAAoC;AACzC,QAAMC,CAAC,GAAGF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAV;AACA,MAAIC,CAAC,GAAGF,CAAC,CAACjB,MAAF,CAASlC,CAAC,IAAIA,CAAC,KAAK,EAApB,CAAR;;AAEA,MAAIkD,IAAI,KAAK,IAAb,EAAmB;AACjBG,IAAAA,CAAC,GAAGA,CAAC,CAACnB,MAAF,CAASlC,CAAC,IAAIA,CAAC,KAAK,EAAN,IAAYA,CAAC,KAAKkD,IAAhC,CAAJ;AACD;;AAED,SAAOG,CAAP;AACD;AAAA,C,CAED;;AACA,OAAO,MAAMC,WAAW,GAAGtC,QAAQ,IAAIA,QAAQ,CAACP,WAAT,GAAuBC,OAAvB,CAA+B,KAA/B,EAAsC,GAAtC,EAA2CA,OAA3C,CAAmD,OAAnD,EAA4D,EAA5D,CAAhC,C,CAEP;;AACA,OAAO,SAAS6C,WAAT,CAAqB3D,IAArB,EAA2BC,GAA3B,EAAgC;AACrC,QAAM2D,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7D,IAAI,CAAC8D,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,QAAI7D,IAAI,CAAC6D,CAAD,CAAJ,CAAQ5D,GAAZ,EAAiB;AACf,UAAID,IAAI,CAAC6D,CAAD,CAAJ,CAAQ5D,GAAR,KAAgBA,GAApB,EAAyB;AACvB2D,QAAAA,OAAO,CAACG,IAAR,CAAa/D,IAAI,CAAC6D,CAAD,CAAJ,CAAQG,QAArB;AACD;AACF;AACF;;AACD,SAAOJ,OAAP;AACD;AAAA,C,CAED;;AACA,OAAO,MAAMK,SAAS,GAAGC,MAAM,IAAIA,MAAM,CAACpD,OAAP,CAAe,OAAf,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,KAArC,EAA4C,GAA5C,EAAiDqD,WAAjD,EAA5B;AAEP,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,MAAM,EAAE,kBADa;AAErB,kBAAgB;AAFK,CAAhB;AAKP,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,QAAMC,OAAO,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAhB;AACA,QAAMG,KAAK,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EAAmG,UAAnG,EAA+G,UAA/G,CAAd;AACA,QAAMd,OAAO,GAAI,GAAEc,KAAK,CAACF,OAAO,CAACG,QAAR,EAAD,CAAqB,IAAGH,OAAO,CAACI,OAAR,EAAkB,KAAIJ,OAAO,CAACK,WAAR,EAAsB,EAA5F;AAEA,SAAOjB,OAAP;AACD;AAED,OAAO,SAASkB,mBAAT,CAA6BC,IAA7B,EAAmC;AACxC,SAAO;AACLC,IAAAA,IAAI,EAAED,IAAI,CAACrD,KADN;AAELqD,IAAAA,IAAI,EAAEA,IAAI,CAACE;AAFN,GAAP;AAID;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5BzC,EAAAA,MAAM,CAAC0C,KAAP;AACA,SAAO,KAAP;AACD;AAED,OAAO,SAASC,cAAT,CAAwB1D,KAAxB,EAA+B;AACpC,QAAM2D,WAAW,GAAG3D,KAAK,CAACZ,OAAN,CAAc,KAAd,EAAqB,GAArB,CAApB;AACA,SAAOmD,SAAS,CAACoB,WAAD,CAAhB;AACD;AAGD,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAClCA,EAAAA,MAAM,CAACpF,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpB,WAAOD,CAAC,CAACoF,OAAF,GAAYnF,CAAC,CAACmF,OAArB;AACD,GAFD;AAGD;AAED,OAAO,eAAeC,OAAf,CAAuB,GAAGC,IAA1B,EAAgC;AACrC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGF,IAAJ,CAAvB;AACA,SAAOC,GAAG,CAACE,IAAJ,EAAP;AACD","sourcesContent":["// sort a list by its key\r\nexport function sortByKey(list, key) {\r\n  if (list !== undefined) {\r\n    list.sort((a, b) => {\r\n      if (a[key] > b[key]) {\r\n        return 1;\r\n      }\r\n      if (a[key] < b[key]) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\n// add a random key to the end of a string\r\nexport const addRandomKey = (str) => str.concat('-').concat(Math.floor((Math.random() * 10000) + 1));\r\n\r\n// take a term lower case and replace white spaces with dashes\r\nexport const urlify = str => str.toLowerCase().replace(/\\s/g, '-');\r\n\r\n// create mark up\r\nexport const createMarkup = content => ({ __html: content });\r\n\r\n// sort by date & key\r\nexport function sortByDateKey(list, key) {\r\n  if (list !== undefined) {\r\n    list.sort((a, b) => {\r\n      if (a[key] < b[key]) {\r\n        return 1;\r\n      }\r\n      if (a[key] > b[key]) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\n// get current directions to office location func\r\nexport function getDirectionsFromLocation(location) {\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 0,\r\n  };\r\n\r\n  const offices = [\r\n    {\r\n      title: 'lyndhurst',\r\n      address: '1100 Valley Brook Ave. Lyndhurst, NJ 07071',\r\n    },\r\n    {\r\n      title: 'red bank',\r\n      address: '331 Newman Springs Road Red Bank, NJ 07701',\r\n    },\r\n    {\r\n      title: 'new york',\r\n      address: '589 8th Avenue, New York, NY, 10018',\r\n    },\r\n    {\r\n      title: 'washington dc',\r\n      address: 'Suite 250 1000 Potomac St., N.W. Washington D.C. 20007',\r\n    },\r\n    {\r\n      title: 'san francisco',\r\n      address: '315 Montgomery St. San Francisco, CA 94104',\r\n    },\r\n  ];\r\n\r\n  const success = (pos) => {\r\n    const crd = pos.coords;\r\n    const lat = crd.latitude;\r\n    const long = crd.longitude;\r\n    const currentOffice = location.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\r\n\r\n    // filter through available offices\r\n    const destination = offices.filter(v => v.title === currentOffice)[0].address;\r\n    const map = `https://www.google.com/maps/dir/${lat}+${long}/${destination}`;\r\n    window.open(map, '_blank');\r\n  };\r\n\r\n  const error = (err) => {\r\n    console.warn(`ERROR(${err.code}):${err.message}`);\r\n  };\r\n\r\n  navigator.geolocation.getCurrentPosition(success, error, options);\r\n};\r\n\r\n// find url parameter for query\r\nexport function splitUrl(url, term = null) {\r\n  const x = url.split('/');\r\n  let y = x.filter(a => a !== '');\r\n\r\n  if (term !== null) {\r\n    y = y.filter(a => a !== '' && a !== term);\r\n  }\r\n\r\n  return y;\r\n};\r\n\r\n// urlify locations\r\nexport const locationUrl = location => location.toLowerCase().replace(/\\s/g, '-').replace(/[.]/gm, '');\r\n\r\n// filter by key\r\nexport function filterByKey(list, key) {\r\n  const results = [];\r\n  for (let i = 0; i < list.length; i += 1) {\r\n    if (list[i].key) {\r\n      if (list[i].key === key) {\r\n        results.push(list[i].selected);\r\n      }\r\n    }\r\n  }\r\n  return results;\r\n};\r\n\r\n// make title\r\nexport const makeTitle = string => string.replace(/-|\\s/g, ' ').replace(/\\+/g, ' ').toUpperCase();\r\n\r\nexport const headers = {\r\n  Accept: 'application/json',\r\n  'Content-Type': 'application/json',\r\n};\r\n\r\nexport function formatDate(date) {\r\n  const dateObj = new Date(date);\r\n  const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n  const results = `${month[dateObj.getMonth()]} ${dateObj.getDate()}, ${dateObj.getFullYear()}`;\r\n\r\n  return results;\r\n}\r\n\r\nexport function formatCorePractices(link) {\r\n  return {\r\n    name: link.title,\r\n    link: link.slug \r\n  }\r\n}\r\n\r\nexport function printScreen() {\r\n  window.print();\r\n  return false;\r\n}\r\n\r\nexport function makeQueryTitle(title) {\r\n  const formatTitle = title.replace(/\\+/g, ' ');\r\n  return makeTitle(formatTitle);\r\n}\r\n\r\n\r\nexport function sortByOrder(admins) {\r\n  admins.sort((a, b) => {\r\n    return a.orderBy - b.orderBy\r\n  });\r\n}\r\n\r\nexport async function fetcher(...args) {\r\n  const res = await fetch(...args);\r\n  return res.json();\r\n}"]},"metadata":{},"sourceType":"module"}